#!/bin/bash

# Script: system-optimizer-dmenu by Nicklas Rudolfsson
# https://github.com/nirucon
# Description: A dmenu script to optimize a Linux system (Arch, Void, Debian based)

# Log file
LOGFILE="/tmp/nirucon-system-optimizer.log"
exec > >(tee -a "$LOGFILE") 2>&1

# Prompt for sudo password
get_sudo_password() {
    SUDO_PASSWORD=$(echo -n | dmenu -p "Enter sudo password: " -fn 'Monospace-18' -nb '#000000' -nf '#FFFFFF' -sb '#3a3d3f' -sf '#FFFFFF')
    export SUDO_PASSWORD
}

# Run a command with sudo and password
run_sudo() {
    echo "$SUDO_PASSWORD" | sudo -S "$@"
}

# Function to detect the distribution
detect_distro() {
    if command -v pacman &> /dev/null; then
        DISTRO="arch"
    elif command -v xbps-install &> /dev/null; then
        DISTRO="void"
    elif command -v apt &> /dev/null; then
        DISTRO="debian"
    else
        notify_error "Unsupported Distro" "This script supports Arch, Void, and Debian-based systems only."
        exit 1
    fi
}

# Determine which AUR helper is installed (yay or paru)
detect_aur_helper() {
    if command -v yay &> /dev/null; then
        AUR_HELPER="yay"
    elif command -v paru &> /dev/null; then
        AUR_HELPER="paru"
    else
        AUR_HELPER=""
    fi
}

# Function to send notifications
notify() {
    local title="$1"
    local message="$2"
    notify-send -u normal -i dialog-information "$title" "$message" || echo "Failed to send notification: $title - $message"
}

# Function to send error notifications
notify_error() {
    local title="$1"
    local message="$2"
    notify-send -u critical -i dialog-error "$title" "$message" || echo "Failed to send error notification: $title - $message"
}

# Check if required tools are installed
check_dependencies() {
    local dependencies=("dmenu" "notify-send" "fsck")
    if [ "$DISTRO" == "arch" ]; then
        dependencies+=("reflector" "paccache")
    fi
    for dep in "${dependencies[@]}"; do
        if ! command -v $dep &> /dev/null; then
            notify_error "Missing Dependency" "Please install $dep"
            exit 1
        fi
    done
}

# Function to update system
update_system() {
    notify "Update System" "Update System started..."
    echo "Updating system..."
    case "$DISTRO" in
        "arch")
            run_sudo pacman -Syu --noconfirm
            [ -n "$AUR_HELPER" ] && $AUR_HELPER -Syu --noconfirm
            ;;
        "void")
            run_sudo xbps-install -Suv
            ;;
        "debian")
            run_sudo apt update && run_sudo apt upgrade -y
            ;;
    esac
    notify "Update System" "Update System done!"
}

# Function to clean package cache
clean_package_cache() {
    notify "Clean Package Cache" "Clean Package Cache started..."
    echo "Cleaning package cache..."
    case "$DISTRO" in
        "arch")
            run_sudo pacman -Sc --noconfirm
            [ -n "$AUR_HELPER" ] && $AUR_HELPER -Sc --noconfirm
            ;;
        "void")
            run_sudo xbps-remove -O
            ;;
        "debian")
            run_sudo apt-get clean
            ;;
    esac
    notify "Clean Package Cache" "Clean Package Cache done!"
}

# Function to remove orphan packages
remove_orphans() {
    notify "Remove Orphans" "Remove Orphans started..."
    echo "Removing orphan packages..."
    case "$DISTRO" in
        "arch")
            orphans=$(pacman -Qdtq)
            [ -n "$orphans" ] && run_sudo pacman -Rns $orphans --noconfirm
            ;;
        "void")
            run_sudo xbps-remove -o
            ;;
        "debian")
            run_sudo apt-get autoremove -y
            ;;
    esac
    notify "Remove Orphans" "Remove Orphans done!"
}

# Function to clean unused package cache
clean_unused_package_cache() {
    notify "Clean Unused Package Cache" "Clean Unused Package Cache started..."
    echo "Cleaning unused package cache..."
    case "$DISTRO" in
        "arch")
            run_sudo paccache -r
            ;;
        "void")
            run_sudo xbps-remove -o
            ;;
        "debian")
            run_sudo apt-get clean
            ;;
    esac
    notify "Clean Unused Package Cache" "Clean Unused Package Cache done!"
}

# Function to optimize system performance
optimize_system_performance() {
    notify "Optimize System Performance" "Optimize System Performance started..."
    echo "Optimizing system performance..."
    run_sudo sysctl -w vm.swappiness=10
    echo "vm.swappiness=10" | run_sudo tee -a /etc/sysctl.d/99-sysctl.conf
    run_sudo systemctl disable bluetooth
    run_sudo systemctl mask systemd-rfkill.service systemd-rfkill.socket
    notify "Optimize System Performance" "Optimize System Performance done!"
}

# Function to update mirrors
update_mirrors() {
    notify "Update Mirrors" "Update Mirrors started..."
    echo "Updating mirrors..."
    if [ "$DISTRO" == "arch" ]; then
        run_sudo reflector --verbose --latest 5 --sort rate --save /etc/pacman.d/mirrorlist
    else
        notify "Update Mirrors" "$DISTRO handles mirrors differently, skipping..."
    fi
    notify "Update Mirrors" "Update Mirrors done!"
}

# Function to check for broken symlinks
check_broken_symlinks() {
    notify "Check Broken Symlinks" "Check Broken Symlinks started..."
    echo "Checking for broken symlinks..."
    find / -xtype l -print || notify_error "Check Broken Symlinks" "Checking for broken symlinks failed!"
    notify "Check Broken Symlinks" "Check Broken Symlinks done!"
}

# Function to remove old journal logs
clean_journal_logs() {
    notify "Clean Journal Logs" "Clean Journal Logs started..."
    echo "Cleaning old journal logs..."
    run_sudo journalctl --vacuum-time=2weeks
    notify "Clean Journal Logs" "Clean Journal Logs done!"
}

# Function to check file system
check_filesystem() {
    notify "Check Filesystem" "Check Filesystem started..."
    echo "Checking filesystem..."
    run_sudo fsck -A -y
    notify "Check Filesystem" "Check Filesystem done!"
}

# Function to perform full optimization
full_optimization() {
    update_system
    clean_package_cache
    remove_orphans
    clean_unused_package_cache
    optimize_system_performance
    update_mirrors
    check_broken_symlinks
    clean_journal_logs
    check_filesystem
}

# Main function to control the script flow
main() {
    detect_distro
    detect_aur_helper
    check_dependencies
    get_sudo_password

    # Define options
    OPTIONS="Update System\nClean Package Cache\nRemove Orphan Packages\nClean Unused Package Cache\nOptimize System Performance\nUpdate Mirrors\nCheck for Broken Symlinks\nClean Old Journal Logs\nCheck Filesystem\nFull Optimization"

    # Display options in dmenu and get user choice
    CHOICE=$(echo -e "$OPTIONS" | dmenu -i -p 'Select an optimization task:')

    # Run the selected option
    case "$CHOICE" in
        "Update System")
            update_system
            ;;
        "Clean Package Cache")
            clean_package_cache
            ;;
        "Remove Orphan Packages")
            remove_orphans
            ;;
        "Clean Unused Package Cache")
            clean_unused_package_cache
            ;;
        "Optimize System Performance")
            optimize_system_performance
            ;;
        "Update Mirrors")
            update_mirrors
            ;;
        "Check for Broken Symlinks")
            check_broken_symlinks
            ;;
        "Clean Old Journal Logs")
            clean_journal_logs
            ;;
        "Check Filesystem")
            check_filesystem
            ;;
        "Full Optimization")
            full_optimization
            ;;
        *)
            notify_error "Invalid Choice" "No valid option selected. Exiting."
            ;;
    esac
}

main
